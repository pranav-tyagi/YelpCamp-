var express=require("express");
var app=express();
var bodyParser=require("body-parser");
var mongoose = require('mongoose');
var Campground=require("./models/campground");
var seedDB=require("./seed");
var Comment=require("./models/comment");
var passport=require("passport");
var LocalStrategy=require("passport-local");
//var passportLocalMongoose=require("passport-local-mongoose");
var User=require("./models/user");
seedDB();
mongoose.connect('mongodb://localhost:27017/yelp_camp', {useNewUrlParser: true});
app.use(bodyParser.urlencoded({extended:true}));
app.set("view engine","ejs");
app.use(require("express-session")({
    secret:"puru is the best",
    resave:false,
    saveUninitialized:false
}));
app.use(passport.initialize());
app.use(passport.session());
passport.use(new LocalStrategy(User.authenticate()));
passport.serializeUser(User.serializeUser);
passport.deserializeUser(User.deserializeUser);
app.use(function(req, res, next){		    
   res.locals.currentUser = req.user;		
   next();		
});
app.get("/",function(req,res){
    res.render("landingPage");
});
app.get("/campgrounds",function(req,res){
    Campground.find({},function(err,camp){
        if(err){
            console.log("something went wrong");
        }
        else{
            res.render("campgrounds/index",{campgrounds:camp});
        }
    });
   
});
app.post("/campgrounds",function(req,res){
     var newCampground={name:"",image:"",desc:""};
     newCampground.name=req.body.name;
    newCampground.image=req.body.image;
    newCampground.desc=req.body.description;
    Campground.create(newCampground,function(err,camp){
        if(err){
            console.log("something went wrong");
        }
        else{
            console.log(camp);
            res.redirect("/campgrounds");
        }
        
    });
    
        
});
app.get("/campgrounds/new",function(req,res){
    res.render("campgrounds/new");
});
//Show-show info of a single campground
//campground.comments caontain the ids not the actual comments 
app.get("/campgrounds/:id",function(req,res){
    Campground.findById(req.params.id).populate("comments").exec(function(err,camp){
        if(err){
            console.log(err);
        }
        else{

            res.render("campgrounds/show",{campground:camp});
        }

    });
   
});
app.get("/campgrounds/:id/comments/new",isLoggedIn,function(req,res){
    Campground.findById(req.params.id,function(err,camp){
        if(err){
            console.log(err);
        }
        else{
            res.render("comments/new",{campground:camp});
        }
    })
    
});
app.post("/campgrounds/:id/comments",isLoggedIn,function(req,res){
        Campground.findById(req.params.id,function(err,camp){
            if(err){
                console.log(err);
                res.redirect("/campgrounds");
            }
            else{
                    Comment.create(req.body.comment,function(err,comment){
                        if(err){
                            console.log(err);
                        }
                        else{
                            camp.comments.push(comment);
                            camp.save();
                            res.redirect("/campgrounds/"+camp._id);
                        }
                   });
            }
        });
});
//  ===========
// AUTH ROUTES
//  ===========

// show register form
app.get("/register", function(req, res){
    res.render("register"); 
 });
 //handle sign up logic
 app.post("/register", function(req, res){
     var newUser = new User({username: req.body.username});
     User.register(newUser, req.body.password, function(err, user){
         if(err){
             console.log(err);
             return res.render("register");
         }
         passport.authenticate("local")(req, res, function(){
            res.redirect("/campgrounds"); 
         });
     });
 });
 
 // show login form
 app.get("/login", function(req, res){
    res.render("login"); 
 });
 // handling login logic
 app.post("/login", passport.authenticate("local", 
     {
         successRedirect: "/campgrounds",
         failureRedirect: "/login"
     }), function(req, res){
 });
 
 // logic route
 app.get("/logout", function(req, res){
    req.logout();
    res.redirect("/campgrounds");
 });
 
 function isLoggedIn(req, res, next){
     if(req.isAuthenticated()){
         return next();
     }
     res.redirect("/login");
 }
 
app.listen(5500,process.env.IP,function(){
    console.log("Server Started!!");
})